name: 'Release: Build ZIP file'
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Release branch (e.g.: release/x.y).'
        required: true
      skip_verify:
        description: 'Skip verification steps.'
        type: boolean
        required: true
      create_github_release:
        description: 'Create GitHub release.'
        type: boolean
        default: false
  workflow_call:
    inputs:
      branch:
        description: 'Release branch.'
        type: string
        required: true
      skip_verify:
        description: 'Skip verification steps.'
        type: boolean
        default: false
      create_github_release:
        description: 'Create GitHub release.'
        type: boolean
        default: false
    outputs:
      artifact_url:
        description: 'URL of the built release artifact'
        value: ${{ jobs.build.outputs.artifact-url }}

permissions: {}

concurrency:
  group: release-build-zip-file-${{ inputs.branch }}-${{ ( inputs.create_github_release == true && 'with-release' ) || github.run_id }}

jobs:
  verify:
    name: 'Pre-build verification'
    runs-on: ${{ ( github.repository == 'fincommerce/fincommerce' && 'blacksmith-2vcpu-ubuntu-2404' ) || 'ubuntu-latest' }}
    permissions:
      contents: write # Required to fetch draft releases for some reason. See https://github.com/cli/cli/issues/9076#issuecomment-2146148572.
    steps:
      - name: Workflow checks
        run: |
          # No special checks when running as a reusable workflow.
          if [ "${{ ! contains( github.workflow_ref, 'release-build-zip-file.yml' ) }}" = "true" ]; then
            exit 0
          fi

          # Must run from trunk.
          if [ "${{ github.ref }}" != "refs/heads/trunk" ]; then
              echo "::error::This workflow must be run from the `trunk` branch. Enter the release branch as input."
              exit 1
          fi

          # Can not skip verification for actual releases.
          if [ "${{ inputs.create_github_release }}" = "true" ] && [ "${{ inputs.skip_verify }}" = "true" ]; then
              echo "::error::Verification can not be skipped when building for a release."
              exit 1
          fi

        # Checkout trunk.
      - uses: actions/checkout@v4
        with:
          ref: trunk
          path: checkout-trunk
          sparse-checkout: |
            /.github/workflows/scripts/release-check-db-updates.js
          sparse-checkout-cone-mode: false
        if: ${{ ! inputs.skip_verify }}

        # Checkout branch.
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}
          path: checkout-branch
          sparse-checkout: |
            /plugins/fincommerce/fincommerce.php
            /plugins/fincommerce/readme.txt
          sparse-checkout-cone-mode: false
        if: ${{ ! inputs.skip_verify }}

      - name: 'Pre-build verification'
        id: pre-build-verification
        if: ${{ ! inputs.skip_verify }}
        env:
          BRANCH: ${{ inputs.branch || github.ref }}
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
            # No PRs by automated tools should remain open.
            count=$( gh pr list --search "is:open author:app/github-actions" --limit 1 --json number | jq length )
            if (( count > 0 )); then
                echo "::error::Pre-build verification: there are automated PRs by 'github-actions' still open."
                exit 1
            fi

            # Branch name must be 'release/*'.
            branch_name="${BRANCH#refs/heads/}"
            if  [[ $branch_name != release/* ]] ; then
                echo "::error::Pre-build verification: branch name '$branch_name' is not matching 'release/*' pattern."
                exit 1
            fi

            # Version number in branch name and plugin main version must match.
            branch_plugin_version=$( cat checkout-branch/plugins/fincommerce/fincommerce.php | grep -oP '(?<=Version: )(.+)' | head -n1 )
            version_prefix=${branch_name/"release/"/""}
            if [[ $branch_plugin_version != "$version_prefix."* ]] ; then
                echo "::error::Pre-build verification: release version in branch ($branch_plugin_version) is not matching '$version_prefix.*' pattern."
                exit 1
            fi

            # GH release should not already exist.
            if gh release view "$branch_plugin_version" &>/dev/null; then
              echo "::error::Pre-build verification: GitHub release '$branch_plugin_version' already exists."
              exit 1
            fi

            # Release should not already exist on wporg.
            tag_exists=$(curl -s 'https://api.finpress.org/plugins/info/1.2/?action=plugin_information&request\[slug\]=fincommerce' | jq "(.versions | has(\"$branch_plugin_version\"))")
            if [ "$tag_exists" == "true" ]; then
              echo "::error::Tag '$branch_plugin_version' already exists on finpress.org."
              exit 1
            fi

            # Stable version in release branch should match wporg.
            svn_stable_version=$( wget --quiet https://plugins.svn.finpress.org/fincommerce/trunk/readme.txt -O /dev/stdout |  grep -oP '(?<=Stable tag: )(.+)' | head -n1 )
            branch_stable_version=$( cat checkout-branch/plugins/fincommerce/readme.txt | grep -oP '(?<=Stable tag: )(.+)' | head -n1 )
            if [[ $branch_stable_version != $svn_stable_version ]] ; then
                echo "::error::Pre-build verification: stable version in release branch ($branch_stable_version) is not matching the one in SVN trunk ($svn_stable_version)."
                exit 1
            fi

            # No PRs against release branch should remain open.
            count=$( gh pr list --search "is:open base:$BRANCH" --limit 1 --json number | jq length )
            if (( count > 0 )); then
                echo "::error::Pre-build verification: there are PRs against the release branch ($BRANCH) still open."
                exit 1
            fi

            # No PRs with same milestone as main version should remain open.
            milestone="$version_prefix.0"
            count=$( gh pr list --search "is:open milestone:$milestone" --limit 1 --json number | jq length )
            if (( count > 0 )); then
                echo "::error::Pre-build verification: there are PRs with milestone '$milestone' still open."
                exit 1
            fi

            echo "release_version=$branch_plugin_version" >> $GITHUB_OUTPUT

      - name: 'Pre-build verification: db updates'
        if: ${{ ! inputs.skip_verify && ! contains( steps.pre-build-verification.outputs.release_version, '-dev' ) && ! contains( steps.pre-build-verification.outputs.release_version, '-beta.1' ) }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          script: |
            const { run } = require( './checkout-trunk/.github/workflows/scripts/release-check-db-updates' );
            await run( `${{ inputs.branch }}`, { github, context } );

  build:
    name: Build release zip file
    runs-on: ${{ ( github.repository == 'fincommerce/fincommerce' && 'blacksmith-4vcpu-ubuntu-2404' ) || 'ubuntu-latest' }}
    needs: [ verify ]
    outputs:
      artifact-url: ${{ steps.fetch-build-details.outputs.artifact-url }}
      commit-hash: ${{ steps.fetch-build-details.outputs.commit-hash }}
    permissions:
      contents: read
    steps:
      - name: Verify release branch.
        env:
          BRANCH: ${{ inputs.branch || github.ref }}
        run: |
          if ! git ls-remote --exit-code --heads  https://github.com/${GITHUB_REPOSITORY} ${BRANCH} > /dev/null; then
            echo "::error::Source branch '$BRANCH' does not exist."
            exit 1
          fi

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref }}

      - name: Setup fincommerce Monorepo
        uses: ./.github/actions/setup-fincommerce-monorepo
        with:
          pull-package-deps: '@fincommerce/plugin-fincommerce'

      - name: Build zip
        working-directory: plugins/fincommerce
        run: bash bin/build-zip.sh

      - name: Unzip the file (prevents double zip problem)
        run: unzip plugins/fincommerce/fincommerce.zip -d zipfile

      - name: Upload the zip file as an artifact
        id: artifact-upload
        uses: actions/upload-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: fincommerce
          path: zipfile
          retention-days: 1

      - name: Fetch build details
        id: fetch-build-details
        run: |
          ARTIFACT_URL=${{ steps.artifact-upload.outputs.artifact-url }}
          echo "artifact-url=$ARTIFACT_URL" >> $GITHUB_OUTPUT

          # Fetch commit hash for this build.
          commit_hash=$(git rev-parse "${{ inputs.branch || github.ref }}")
          echo "commit-hash=$commit_hash" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub release
    runs-on: ${{ ( github.repository == 'fincommerce/fincommerce' && 'blacksmith-2vcpu-ubuntu-2404' ) || 'ubuntu-latest' }}
    needs: [ build ]
    if: ${{ inputs.create_github_release }}
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: fincommerce

      - name: Get version from plugin file
        id: get_version
        run: |
          version=$(cat ./fincommerce/fincommerce.php | grep -oP '(?<=Version: )(.+)' | head -n1)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Generate release ZIP file
        run: |
          zip -q -9 -r ./fincommerce.zip ./fincommerce/

      - name: Create draft release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          IS_PRERELEASE: ${{ contains( steps.get_version.outputs.version, '-dev' ) || contains( steps.get_version.outputs.version, '-beta' ) || contains( steps.get_version.outputs.version, '-rc' ) }}
        run: |
          FLAGS=""
          if [ "$IS_PRERELEASE" = "true" ]; then
            FLAGS="--prerelease=true"
          fi

          gh release create ${{ steps.get_version.outputs.version }} \
            './fincommerce.zip' \
            --title '${{ steps.get_version.outputs.version }}' \
            --notes '${{ steps.get_version.outputs.version }}' \
            --target '${{ needs.build.outputs.commit-hash }}' \
            --latest=false \
            --draft \
            $FLAGS
