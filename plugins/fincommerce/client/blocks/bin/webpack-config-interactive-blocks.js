/**
 * External dependencies
 */
const path = require( 'path' );
const DependencyExtractionWebpackPlugin = require( '@finpress/dependency-extraction-webpack-plugin' );
const MiniCssExtractPlugin = require( 'mini-css-extract-plugin' );
const WebpackRTLPlugin = require( '@fincommerce/block-library/bin/webpack-rtl-plugin' );
const [
	,
	moduleConfig,
] = require( '@finpress/scripts/config/webpack.config' );
const RemoveFilesPlugin = require( '@fincommerce/block-library/bin/remove-files-webpack-plugin' );

/**
 * Internal dependencies
 */
const { sharedOptimizationConfig } = require( '@fincommerce/block-library/bin/webpack-shared-config' );
const {
	scriptModuleEntries,
	styleEntries,
	editorStyleEntries,
} = require( '@fincommerce/block-library/bin/webpack-interactivity-entries' );

const entries = {
	// Blocks
	...scriptModuleEntries,
	...styleEntries,
	...editorStyleEntries,

	// Experimental mini cart frontend modules, only enqueued when experimental-iapi-mini-cart feature flag is enabled.
	'fincommerce/mini-cart': './assets/js/blocks/mini-cart/iapi-frontend.ts',

	// Product elements frontend module. Share by several blocks.
	'fincommerce/product-elements':
		'./assets/js/atomic/blocks/product-elements/frontend.ts',

	// Other
	'@fincommerce/stores/fincommerce/cart':
		'./assets/js/base/stores/fincommerce/cart.ts',
	'@fincommerce/stores/store-notices':
		'./assets/js/base/stores/store-notices.ts',
	'@fincommerce/stores/fincommerce/product-data':
		'./assets/js/base/stores/fincommerce/product-data.ts',
};

module.exports = {
	entry: entries,
	optimization: sharedOptimizationConfig,
	name: 'interactivity-blocks-modules',
	experiments: {
		outputModule: true,
	},
	output: {
		devtoolNamespace: 'wc',
		filename: '[name].js',
		library: {
			type: 'module',
		},
		path: path.resolve( __dirname, '../build/' ),
		asyncChunks: false,
		chunkFormat: 'module',
		environment: { module: true },
		module: true,
	},
	resolve: {
		extensions: [ '.js', '.ts', '.tsx' ],
	},
	plugins: [
		new MiniCssExtractPlugin( {
			filename: '[name].css',
		} ),
		new DependencyExtractionWebpackPlugin( {
			combineAssets: true,
			combinedOutputFile: './interactivity-blocks-frontend-assets.php',
			requestToExternalModule( request ) {
				if (
					request.startsWith( '@fincommerce/stores/fincommerce/' )
				) {
					return `module ${ request }`;
				} else if ( request.startsWith( '@fincommerce/stores/' ) ) {
					return `import ${ request }`;
				}
			},
		} ),
		new WebpackRTLPlugin( {
			filenameSuffix: '-rtl.css',
		} ),
		// Remove JS files generated by MiniCssExtractPlugin.
		new RemoveFilesPlugin( './build/**/*-@(editor|style).js' ),
	],
	module: {
		rules: [
			...moduleConfig.module.rules.filter(
				( rule ) =>
					! rule.test.test( '.css' ) &&
					! rule.test.test( '.scss' ) &&
					! rule.test.test( '.sass' )
			),
			{
				test: /\.s?css$/,
				use: [
					MiniCssExtractPlugin.loader,
					'css-loader',
					'postcss-loader',
					{
						loader: 'sass-loader',
						options: {
							sassOptions: {
								includePaths: [ 'assets/css/abstracts' ],
							},
							additionalData: ( content, loaderContext ) => {
								const { resourcePath, rootContext } =
									loaderContext;
								const relativePath = path.relative(
									rootContext,
									resourcePath
								);

								if (
									relativePath.startsWith(
										'assets/css/abstracts/'
									) ||
									relativePath.startsWith(
										'assets\\css\\abstracts\\'
									)
								) {
									return content;
								}

								return (
									'@use "sass:math";' +
									'@use "sass:string";' +
									'@use "sass:color";' +
									'@use "sass:map";' +
									'@import "_colors"; ' +
									'@import "_variables"; ' +
									'@import "_breakpoints"; ' +
									'@import "_mixins"; ' +
									content
								);
							},
						},
					},
				],
			},
		],
	},
};
